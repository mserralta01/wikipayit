rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAdmin() {
      return request.auth != null &&
        (request.auth.token.email == 'mserralta@gmail.com' ||
         request.auth.token.email == 'Mpilotg6@gmail.com' ||
         request.auth.token.email == 'serralta@outlook.com');
    }

    function hasTeamAccess() {
      return request.auth != null &&
        get(/databases/$(database)/documents/teamMembers/$(request.auth.uid)).data != null;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    // Banking Partners
    match /bankingPartners/{partnerId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /bankContacts/{contactId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /bankAgreements/{agreementId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /bankingPartnerNotes/{noteId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Allow authenticated users to read and write leads
    match /leads/{leadId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        // Allow pipeline updates
        (request.resource.data.diff(resource.data).affectedKeys().hasAny(['pipelineStatus', 'position', 'updatedAt']) && isAdmin())
      );
      allow delete: if isAdmin();
    }

    // Allow authenticated users to read and write merchants with expanded permissions
    match /merchants/{merchantId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        // Allow pricing updates by admin
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['pricing', 'updatedAt']) && isAdmin()) ||
        // Allow status and pipeline updates by team members
        (request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'pipelineStatus', 'position', 'updatedAt']) && isAdmin())
      );
      allow delete: if isAdmin();
    }

    // Activities collection (notes, phone calls, emails)
    match /activities/{activityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
    }

    // Team members collection
    match /teamMembers/{memberId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Team invitations collection
    match /teamInvitations/{invitationId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Website sections collection
    match /sections/{sectionId} {
      allow read: if true; // Public can read sections
      allow write: if isAdmin(); // Only admins can modify sections
    }

    // Settings collection - more specific rule for API settings
    match /settings/api {
      allow read, write: if isAdmin();
    }

    // Other settings documents
    match /settings/{document} {
      allow read, write: if isAdmin();
    }

    // Catch-all rule
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    match /interchangeRates/{document=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                   request.auth.token.admin == true;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if request.auth != null;
    }
  }
}
